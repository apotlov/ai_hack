#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent / "src"))

import logging
import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional

from real_features_processor import RealFeaturesProcessor
from model_trainer import ModelTrainer
from local_llm_enhancer import LocalLLMEnhancer, OllamaInstaller

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def setup_local_llm_for_real_data(model_name: str = "llama3.2:3b") -> Optional[LocalLLMEnhancer]:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    Args:
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π LocalLLMEnhancer –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Ollama
    if not OllamaInstaller.check_ollama_installed():
        logger.error("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("\n" + OllamaInstaller.get_installation_instructions())
        return None

    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
    recommended_model = OllamaInstaller.recommend_model_by_resources()
    logger.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {recommended_model}")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é LLM
        llm_enhancer = LocalLLMEnhancer(model=model_name)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if llm_enhancer.test_connection():
            logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è LLM –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = llm_enhancer.get_model_info()
            logger.info(f"üìä –ú–æ–¥–µ–ª—å: {model_info}")

            return llm_enhancer
        else:
            logger.warning("‚ö†Ô∏è  –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
            return llm_enhancer

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM: {e}")
        return None


def enhance_real_predictions_with_llm(predictions_df: pd.DataFrame,
                                     features_df: pd.DataFrame,
                                     llm_enhancer: LocalLLMEnhancer) -> pd.DataFrame:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –∫ —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º

    Args:
        predictions_df: DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        features_df: DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        llm_enhancer: –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –µ–Ω—Ö–∞–Ω—Å–µ—Ä

    Returns:
        DataFrame —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
    """
    logger.info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM...")

    enhanced_df = predictions_df.copy()

    # –°–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    explanations = []
    key_factors_list = []
    recommendations_list = []
    confidence_scores = []

    total_rows = len(predictions_df)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for idx, row in predictions_df.iterrows():
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∞–ª—å–Ω—ã–µ)
            user_data = {
                'applicationid': row.get('applicationid', f'app_{idx}'),
                'sample_id': row.get('sample_id', idx),
                'risk_level': row.get('risk_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'fraud_probability': row.get('fraud_probability', 0)
            }

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
            if idx < len(features_df):
                features = features_df.iloc[idx].to_dict()
                # –£–±–∏—Ä–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                features = {k: v for k, v in features.items()
                           if pd.notna(v) and _is_important_feature(k, v)}
            else:
                features = {}

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
            fraud_explanation = llm_enhancer.explain_fraud_decision(
                user_data=user_data,
                features=features,
                probability=row['fraud_probability']
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            explanations.append(fraud_explanation.explanation)
            key_factors_list.append(" | ".join(fraud_explanation.key_factors))
            recommendations_list.append(" | ".join(fraud_explanation.recommendations))
            confidence_scores.append(fraud_explanation.confidence)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (idx + 1) % 10 == 0 or idx + 1 == total_rows:
                progress = (idx + 1) / total_rows * 100
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx + 1}/{total_rows} ({progress:.1f}%)")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            explanations.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            key_factors_list.append("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            recommendations_list.append("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")
            confidence_scores.append(0.5)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    enhanced_df['llm_explanation'] = explanations
    enhanced_df['key_factors'] = key_factors_list
    enhanced_df['recommendations'] = recommendations_list
    enhanced_df['explanation_confidence'] = confidence_scores

    logger.info("‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return enhanced_df


def _is_important_feature(feature_name: str, value: Any) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    """
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    skip_patterns = ['chunk', 'source', 'file_path', '_dup', 'sample_id', 'applicationid']
    if any(pattern in feature_name.lower() for pattern in skip_patterns):
        return False

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –æ—á–µ–Ω—å –º–∞–ª—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if isinstance(value, (int, float)) and abs(value) < 0.001:
        return False

    return True


def create_real_data_fraud_report(enhanced_predictions: pd.DataFrame,
                                llm_enhancer: LocalLLMEnhancer) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    Args:
        enhanced_predictions: DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
        llm_enhancer: –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –µ–Ω—Ö–∞–Ω—Å–µ—Ä

    Returns:
        –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º...")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏)
    fraud_cases = []
    for _, row in enhanced_predictions.iterrows():
        if row['fraud_probability'] > 0.2:  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            fraud_cases.append({
                'applicationid': row.get('applicationid', 'unknown'),
                'probability': row['fraud_probability'],
                'risk_level': row['risk_level'],
                'explanation': row['llm_explanation'],
                'key_factors': row['key_factors'],
                'timestamp': pd.Timestamp.now().isoformat()
            })

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
    llm_report = llm_enhancer.generate_fraud_report(fraud_cases)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    total_cases = len(enhanced_predictions)
    high_risk_cases = len(enhanced_predictions[enhanced_predictions['fraud_probability'] >= 0.7])
    medium_risk_cases = len(enhanced_predictions[
        (enhanced_predictions['fraud_probability'] >= 0.3) &
        (enhanced_predictions['fraud_probability'] < 0.7)
    ])
    suspicious_cases = len(enhanced_predictions[enhanced_predictions['fraud_probability'] >= 0.2])

    detailed_report = f"""
+=== –û–¢–ß–ï–¢ –ê–ù–¢–ò–§–†–û–î –°–ò–°–¢–ï–ú–´ –ü–û –†–ï–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú ===
+–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}
+–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {llm_enhancer.model}
+
+–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:
+- –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Å—Å–∏–π: {total_cases:,}
+- –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (‚â•20%): {suspicious_cases:,} ({suspicious_cases/total_cases:.1%})
+- –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (‚â•70%): {high_risk_cases:,} ({high_risk_cases/total_cases:.1%})
+- –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (30-70%): {medium_risk_cases:,} ({medium_risk_cases/total_cases:.1%})
+- –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (<30%): {total_cases - high_risk_cases - medium_risk_cases:,}
+
+–ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–ê (–õ–æ–∫–∞–ª—å–Ω–∞—è LLM):
+{llm_report}
+
+–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò –î–õ–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ô –ü–†–û–í–ï–†–ö–ò:
+"""
+
+    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ (‚â•80%)
+    critical_cases = enhanced_predictions[enhanced_predictions['fraud_probability'] >= 0.8]
+    if len(critical_cases) > 0:
+        detailed_report += f"\nüö® –ù–ê–ô–î–ï–ù–û {len(critical_cases)} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–õ–£–ß–ê–ï–í:\n"
+        for i, (_, case) in enumerate(critical_cases.head(10).iterrows(), 1):
+            session_info = case.get('session_id', f"sample_{case.get('sample_id', i)}")
+            detailed_report += f"""
+{i}. –°–µ—Å—Å–∏—è {session_info} - –†–∏—Å–∫: {case['fraud_probability']:.1%}
+   ‚ö†Ô∏è  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {case['llm_explanation'][:150]}...
+   üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {case['key_factors'][:120]}...
+   üí° –î–µ–π—Å—Ç–≤–∏—è: {case['recommendations'][:100]}...
+"""
+    else:
+        detailed_report += "\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ (‚â•80%) –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
+
+    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
+    detailed_report += f"\nüìà –¢–û–ü-5 –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –°–ï–°–°–ò–ô:\n"
+    top_cases = enhanced_predictions.nlargest(5, 'fraud_probability')
for i, (_, case) in enumerate(top_cases.iterrows(), 1):
    app_info = case.get('applicationid', f"sample_{case.get('sample_id', i)}")
    detailed_report += f"""
{i}. –ó–∞—è–≤–∫–∞ {app_info}
üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {case['fraud_probability']:.1%}
üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {case['risk_level']}
ü§ñ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: {case['llm_explanation'][:200]}...
‚ö° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {case['recommendations'][:150]}...
üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {case['explanation_confidence']:.1%}
"""
+"""
+
+    detailed_report += f"""
+
+=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú ===
+
+–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
+"""
+    if high_risk_cases > 0:
+        detailed_report += f"""
+1. üö® –°–†–û–ß–ù–û –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {high_risk_cases} —Å–ª—É—á–∞–µ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
+2. üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è
+3. üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
+4. üëÆ –£–≤–µ–¥–æ–º–∏—Ç—å —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö
+5. üìã –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
+"""
+    else:
+        detailed_report += "\n‚úÖ –°–ª—É—á–∞–µ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
+
+    detailed_report += f"""
+–£–°–ò–õ–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì:
+"""
+    if medium_risk_cases > 0:
+        detailed_report += f"""
+1. üëÅÔ∏è  –£—Å–∏–ª–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ {medium_risk_cases} —Å–ª—É—á–∞—è–º–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
+2. üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
+3. üîê –ü–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
+4. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24-48 —á–∞—Å–æ–≤
+"""
+
+    detailed_report += f"""
+
+–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
+1. üìà –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
+2. üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
+3. ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–∏—Ö —É–≥—Ä–æ–∑
+4. üìù –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª—É—á–∞–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
+5. ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è LLM –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
+
+=== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ===
+"""
+
+    return detailed_report


def create_real_data_html_report(enhanced_predictions: pd.DataFrame, output_dir: Path):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üåê –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_cases = len(enhanced_predictions)
    high_risk = len(enhanced_predictions[enhanced_predictions['fraud_probability'] >= 0.7])
    medium_risk = len(enhanced_predictions[
        (enhanced_predictions['fraud_probability'] >= 0.3) &
        (enhanced_predictions['fraud_probability'] < 0.7)
    ])
    low_risk = total_cases - high_risk - medium_risk

    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ –ê–Ω–∞–ª–∏–∑ –†–µ–∞–ª—å–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: 'Segoe UI', Arial, sans-serif; margin: 20px; background-color: #f5f7fa; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                   color: white; padding: 30px; border-radius: 15px; margin-bottom: 25px;
                   box-shadow: 0 10px 30px rgba(0,0,0,0.1); }}
        .header h1 {{ margin: 0; font-size: 2.5em; }}
        .header p {{ margin: 5px 0; opacity: 0.9; }}

        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                  gap: 20px; margin: 25px 0; }}
        .stat-card {{ background: white; padding: 25px; border-radius: 12px; text-align: center;
                      box-shadow: 0 5px 15px rgba(0,0,0,0.08); transition: transform 0.2s; }}
        .stat-card:hover {{ transform: translateY(-2px); }}
        .stat-number {{ font-size: 2.5em; font-weight: bold; margin-bottom: 10px; }}
        .stat-label {{ color: #666; font-size: 1.1em; }}

        .risk-critical {{ background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; }}
        .risk-high {{ background-color: #ffe8e8; border-left: 5px solid #ff4757; }}
        .risk-medium {{ background-color: #fff4e6; border-left: 5px solid #ffa726; }}
        .risk-low {{ background-color: #e8f5e8; border-left: 5px solid #66bb6a; }}

        .case {{ margin: 20px 0; padding: 25px; border-radius: 12px;
                 background: white; box-shadow: 0 3px 10px rgba(0,0,0,0.1); }}
        .case-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }}
        .session-id {{ font-size: 1.3em; font-weight: bold; color: #2c3e50; }}
        .probability {{ font-size: 1.2em; font-weight: bold; }}
        .badge {{ padding: 8px 16px; border-radius: 20px; color: white; font-size: 0.9em; font-weight: bold; }}
        .badge-critical {{ background: #e74c3c; }}
        .badge-high {{ background: #e67e22; }}
        .badge-medium {{ background: #f39c12; }}
        .badge-low {{ background: #27ae60; }}

        .explanation {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 15px 0;
                       border-left: 4px solid #3498db; }}
        .factors {{ background: #ecf0f1; padding: 15px; border-radius: 8px; margin: 15px 0; }}
        .recommendations {{ background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 15px 0;
                           border-left: 4px solid #27ae60; }}
        .confidence {{ font-size: 0.9em; color: #7f8c8d; text-align: right; margin-top: 10px; }}

        .critical-alert {{ background: #c0392b; color: white; padding: 20px; border-radius: 10px;
                          margin: 20px 0; text-align: center; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 40px; color: #7f8c8d; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è –ê–Ω—Ç–∏—Ñ—Ä–æ–¥ –ê–Ω–∞–ª–∏–∑ –†–µ–∞–ª—å–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö</h1>
        <p>ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è LLM –º–æ–¥–µ–ª—å: Ollama</p>
        <p>üìÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p>üîí –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ</p>
    </div>

    <div class="stats">
        <div class="stat-card">
            <div class="stat-number">{total_cases:,}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π</div>
        </div>
        <div class="stat-card">
            <div class="stat-number risk-critical">{high_risk:,}</div>
            <div class="stat-label">–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" style="color: #ffa726;">{medium_risk:,}</div>
            <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" style="color: #66bb6a;">{low_risk:,}</div>
            <div class="stat-label">–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</div>
        </div>
    </div>
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª—É—á–∞–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    if high_risk > 0:
        html_content += f"""
    <div class="critical-alert">
        üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {high_risk} —Å–ª—É—á–∞–µ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞, —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!
    </div>
"""

    html_content += "<h2>üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª—É—á–∞–µ–≤</h2>"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–∏ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
    sorted_predictions = enhanced_predictions.sort_values('fraud_probability', ascending=False)

    for i, (_, case) in enumerate(sorted_predictions.head(20).iterrows()):
    app_id = case.get('applicationid', f"sample_{case.get('sample_id', i)}")
    probability = case['fraud_probability']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∏—Å–∫–∞
    if probability >= 0.8:
        risk_class = "risk-critical"
        badge_class = "badge-critical"
        risk_text = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
    elif probability >= 0.7:
        risk_class = "risk-high"
        badge_class = "badge-high"
        risk_text = case['risk_level']
    elif probability >= 0.3:
        risk_class = "risk-medium"
        badge_class = "badge-medium"
        risk_text = case['risk_level']
    else:
        risk_class = "risk-low"
        badge_class = "badge-low"
        risk_text = case['risk_level']

    html_content += f"""
<div class="case {risk_class}">
    <div class="case-header">
        <div class="session-id">üéØ –ó–∞—è–≤–∫–∞: {app_id}</div>
        <div>
            <span class="probability">{probability:.1%}</span>
            <span class="badge {badge_class}">{risk_text}</span>
        </div>
    </div>

        <div class="explanation">
            <strong>üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM:</strong><br>
            {case['llm_explanation']}
        </div>

        <div class="factors">
            <strong>üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:</strong><br>
            {case['key_factors'].replace(' | ', '<br>‚Ä¢ ')}
        </div>

        <div class="recommendations">
            <strong>üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</strong><br>
            {case['recommendations'].replace(' | ', '<br>‚Ä¢ ')}
        </div>

        <div class="confidence">
            üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ: {case['explanation_confidence']:.1%}
        </div>
    </div>
"""

    html_content += """
    <div class="footer">
        <p>ü§ñ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö API</p>
        <p>üîí –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ</p>
        <p>‚ö° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑</p>
    </div>
</body>
</html>
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
    html_file = output_dir / "real_data_fraud_analysis.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(html_content)

    logger.info(f"üåê HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {html_file}")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM")

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
        project_dir = Path(__file__).parent.parent
        models_dir = project_dir / "models"
        output_dir = project_dir / "output"
        data_dir = project_dir / "data"

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        output_dir.mkdir(exist_ok=True)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é LLM
        llm_enhancer = setup_local_llm_for_real_data()
        if not llm_enhancer:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é LLM")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        logger.info("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
        model_trainer = ModelTrainer(str(models_dir))

        model_names = ["real_antifraud_model", "antifraud_model_v1", "antifraud_model"]
        model_loaded = False

        for model_name in model_names:
            try:
                model_trainer.load_model(model_name)
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_name}")
                model_loaded = True
                break
            except FileNotFoundError:
                continue

        if not model_loaded:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/train_real_data.py")
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        features_processor = RealFeaturesProcessor(str(data_dir))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        logger.info("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        features_df = features_processor.create_prediction_features(str(data_dir))

        if features_df.empty:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º applicationids
        application_ids = None
        if 'applicationid' in features_df.columns:
            application_ids = features_df['applicationid'].copy()
            features_df = features_df.drop('applicationid', axis=1)

        logger.info(f"üìà –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {features_df.shape}")

        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        logger.info("üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        predictions = model_trainer.predict(features_df)
        probabilities = model_trainer.predict_proba(features_df)
        fraud_probabilities = probabilities[:, 1]

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        basic_predictions = pd.DataFrame({
            'sample_id': range(len(features_df)),
            'prediction': predictions,
            'fraud_probability': fraud_probabilities,
            'risk_level': pd.cut(
                fraud_probabilities,
                bins=[0, 0.3, 0.7, 1.0],
                labels=['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']
            )
        })

        # –î–æ–±–∞–≤–ª—è–µ–º applicationids –µ—Å–ª–∏ –µ—Å—Ç—å
        if application_ids is not None:
            basic_predictions.insert(0, 'applicationid', application_ids.values)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
        enhanced_predictions = enhance_real_predictions_with_llm(
            basic_predictions, features_df, llm_enhancer
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = output_dir / "real_data_predictions_with_llm.csv"
        enhanced_predictions.to_csv(results_file, index=False, encoding='utf-8')
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        detailed_report = create_real_data_fraud_report(enhanced_predictions, llm_enhancer)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = output_dir / "real_data_fraud_report.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(detailed_report)
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        create_real_data_html_report(enhanced_predictions, output_dir)

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_cases = len(enhanced_predictions)
        high_risk = len(enhanced_predictions[enhanced_predictions['fraud_probability'] >= 0.7])
        medium_risk = len(enhanced_predictions[
            (enhanced_predictions['fraud_probability'] >= 0.3) &
            (enhanced_predictions['fraud_probability'] < 0.7)
        ])
        critical_cases = len(enhanced_predictions[enhanced_predictions['fraud_probability'] >= 0.8])

        logger.info("\n" + "="*70)
        logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –° LLM –ó–ê–í–ï–†–®–ï–ù!")
        logger.info("="*70)
        logger.info(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_cases:,}")
        logger.info(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (‚â•80%): {critical_cases:,}")
        logger.info(f"üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (‚â•70%): {high_risk:,}")
        logger.info(f"üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (30-70%): {medium_risk:,
