#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–∏—Å—Ç–µ–º—ã MVP
"""

import sys
import os
from pathlib import Path
import argparse
import logging
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent / "src"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def setup_directories():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    """
    base_dir = Path(__file__).parent.parent
    directories = [
        base_dir / "data" / "amplitude",
        base_dir / "data" / "audio",
        base_dir / "models",
        base_dir / "output"
    ]

    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)
        logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞: {directory}")


def run_training():
    """
    –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    """
    logger.info("üéì –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
        import subprocess
        import sys

        train_script = Path(__file__).parent / "train.py"
        result = subprocess.run([sys.executable, str(train_script)],
                              capture_output=True, text=True)

        if result.returncode == 0:
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            logger.info(result.stdout)
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
            logger.error(result.stderr)
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False


def run_prediction():
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    logger.info("üîÆ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")

    try:
        import subprocess
        import sys

        predict_script = Path(__file__).parent / "predict.py"
        result = subprocess.run([sys.executable, str(predict_script)],
                              capture_output=True, text=True)

        if result.returncode == 0:
            logger.info("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            logger.info(result.stdout)
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏")
            logger.error(result.stderr)
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        return False


def run_full_pipeline():
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: –æ–±—É—á–µ–Ω–∏–µ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–∏—Å—Ç–µ–º—ã")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã
    setup_directories()

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not run_training():
        logger.error("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
        return False

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if not run_prediction():
        logger.error("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        return False

    logger.info("üéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True


def check_system():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        base_dir = Path(__file__).parent.parent
        required_dirs = [
            base_dir / "src",
            base_dir / "scripts",
            base_dir / "data"
        ]

        for directory in required_dirs:
            if not directory.exists():
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
                return False
            logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: {directory}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        try:
            import pandas
            import numpy
            import sklearn
            import joblib
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        try:
            from feature_extractor import FeatureExtractor
            from model_trainer import ModelTrainer
            from data_loader import DataLoader
            logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def show_status():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    """
    logger.info("üìä –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–∏—Å—Ç–µ–º—ã")

    base_dir = Path(__file__).parent.parent

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    models_dir = base_dir / "models"
    if models_dir.exists():
        models = list(models_dir.glob("*.joblib"))
        logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        for model in models:
            logger.info(f"   - {model.name}")
    else:
        logger.info("ü§ñ –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_dir = base_dir / "data"
    if data_dir.exists():
        amplitude_files = list((data_dir / "amplitude").glob("*.parquet")) if (data_dir / "amplitude").exists() else []
        audio_files = list((data_dir / "audio").glob("*.wav")) if (data_dir / "audio").exists() else []
        targets_file = data_dir / "targets.csv"

        logger.info(f"üìä Amplitude —Ñ–∞–π–ª–æ–≤: {len(amplitude_files)}")
        logger.info(f"üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
        logger.info(f"üéØ –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç–∫–∏: {'‚úÖ' if targets_file.exists() else '‚ùå'}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = base_dir / "output"
    if output_dir.exists():
        results = list(output_dir.glob("*.csv")) + list(output_dir.glob("*.txt"))
        logger.info(f"üìÑ –§–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        for result in results:
            logger.info(f"   - {result.name}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    parser = argparse.ArgumentParser(
        description="–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–∏—Å—Ç–µ–º–∞ MVP - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --full              # –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (–æ–±—É—á–µ–Ω–∏–µ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)
  python main.py --train             # –¢–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
  python main.py --predict           # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
  python main.py --check             # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  python main.py --status            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        """
    )

    parser.add_argument("--full", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (–æ–±—É—á–µ–Ω–∏–µ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)")
    parser.add_argument("--train", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--predict", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    parser.add_argument("--check", action="store_true",
                       help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--status", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--setup", action="store_true",
                       help="–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

    args = parser.parse_args()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    print("=" * 60)
    print("üõ°Ô∏è  –ê–ù–¢–ò–§–†–û–î –°–ò–°–¢–ï–ú–ê MVP")
    print("   –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞")
    print("=" * 60)
    print()

    success = True

    try:
        if args.setup:
            setup_directories()

        elif args.check:
            success = check_system()

        elif args.status:
            show_status()

        elif args.train:
            success = run_training()

        elif args.predict:
            success = run_prediction()

        elif args.full:
            success = run_full_pipeline()

        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –º–µ–Ω—é
            show_status()
            print()
            print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("   --full      –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
            print("   --train     –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            print("   --predict   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            print("   --check     –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            print("   --status    –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            print("   --setup     –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            print()
            print("–ü—Ä–∏–º–µ—Ä: python main.py --full")

    except KeyboardInterrupt:
        logger.info("\n‚è∏Ô∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        success = False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        success = False

    finally:
        print()
        if success:
            print("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("=" * 60)

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
