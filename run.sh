#!/bin/bash

# =============================================================================
# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–∏—Å—Ç–µ–º—ã
# =============================================================================
#
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
# data_train/          - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
# ‚îú‚îÄ‚îÄ amplitude/       - parquet —Ñ–∞–π–ª—ã –æ–±—É—á–µ–Ω–∏—è
# ‚îú‚îÄ‚îÄ audiofiles/      - –∞—É–¥–∏–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
# ‚îî‚îÄ‚îÄ svod.csv         - —Å–≤—è–∑–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
#
# data/                - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
# ‚îú‚îÄ‚îÄ amplitude/       - parquet —Ñ–∞–π–ª—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
# ‚îÇ   ‚îî‚îÄ‚îÄ svod.csv     - —Å–≤—è–∑–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
# ‚îî‚îÄ‚îÄ audiofiles/      - –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
#
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    python3 -c "
import pandas, numpy, sklearn, tqdm
print('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
" || {
        error "–ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt"
        exit 1
    }

    success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
check_data_structure() {
    log "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –æ–±—É—á–µ–Ω–∏—è
    if [ ! -d "data_train" ]; then
        error "–ü–∞–ø–∫–∞ data_train –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi

    if [ ! -d "data_train/amplitude" ]; then
        error "–ü–∞–ø–∫–∞ data_train/amplitude –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi

    if [ ! -d "data_train/audiofiles" ]; then
        warning "–ü–∞–ø–∫–∞ data_train/audiofiles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    fi

    if [ ! -f "data_train/svod.csv" ]; then
        warning "–§–∞–π–ª data_train/svod.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if [ ! -d "data" ]; then
        error "–ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi

    if [ ! -d "data/amplitude" ]; then
        error "–ü–∞–ø–∫–∞ data/amplitude –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi

    if [ ! -d "data/audiofiles" ]; then
        warning "–ü–∞–ø–∫–∞ data/audiofiles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    fi

    if [ ! -f "data/amplitude/svod.csv" ]; then
        warning "–§–∞–π–ª data/amplitude/svod.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è
    TRAIN_PARQUET_COUNT=$(find data_train/amplitude -name "*.parquet" 2>/dev/null | wc -l)
    if [ "$TRAIN_PARQUET_COUNT" -eq 0 ]; then
        error "–ù–µ—Ç parquet —Ñ–∞–π–ª–æ–≤ –≤ data_train/amplitude!"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    PRED_PARQUET_COUNT=$(find data/amplitude -name "*.parquet" 2>/dev/null | wc -l)
    if [ "$PRED_PARQUET_COUNT" -eq 0 ]; then
        error "–ù–µ—Ç parquet —Ñ–∞–π–ª–æ–≤ –≤ data/amplitude!"
        exit 1
    fi

    success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    log "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: $TRAIN_PARQUET_COUNT"
    log "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: $PRED_PARQUET_COUNT"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama
check_ollama() {
    log "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama..."

    if ! command -v ollama &> /dev/null; then
        warning "Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        echo ""
        echo "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama:"
        echo "curl -fsSL https://ollama.ai/install.sh | sh"
        echo ""
        echo "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
        echo "ollama serve"
        echo "ollama pull llama3.2:3b"
        echo ""
        echo "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–π..."
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    if ! curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
        warning "Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve"
        echo "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–π..."
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if ! ollama list | grep -q "llama3.2:3b"; then
        warning "–ú–æ–¥–µ–ª—å llama3.2:3b –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama3.2:3b"
        echo "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–π..."
        return 1
    fi

    success "Ollama –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
prepare_environment() {
    log "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    mkdir -p models
    mkdir -p output
    mkdir -p logs

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PYTHONPATH
    export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"

    success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—É—Ç–µ–π –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
adapt_scripts() {
    log "üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö..."

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è data_train
    if [ ! -f "scripts/train_with_data_train.py" ]; then
        error "–°–∫—Ä–∏–ø—Ç train_with_data_train.py –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi

    success "–°–∫—Ä–∏–ø—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
run_training() {
    log "üéì –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏..."
    echo ""
    echo -e "${PURPLE}=== –≠–¢–ê–ü 1: –û–ë–£–ß–ï–ù–ò–ï –ê–ù–¢–ò–§–†–û–î –ú–û–î–ï–õ–ò ===${NC}"
    echo ""

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if python3 scripts/train_with_data_train.py 2>&1 | tee logs/training.log; then
        success "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞
        if [ -f "models/real_antifraud_model.joblib" ]; then
            success "–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/real_antifraud_model.joblib"
        else
            error "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è!"
            return 1
        fi
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏!"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: logs/training.log"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
run_predictions() {
    log "üîÆ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π..."
    echo ""
    echo -e "${PURPLE}=== –≠–¢–ê–ü 2: –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –° LLM –ê–ù–ê–õ–ò–ó–û–ú ===${NC}"
    echo ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if [ ! -f "models/real_antifraud_model.joblib" ]; then
        error "–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        echo "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ"
        return 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if python3 scripts/predict_real_data_with_llm.py 2>&1 | tee logs/predictions.log; then
        success "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if [ -f "output/real_data_predictions_with_llm.csv" ]; then
            success "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: output/real_data_predictions_with_llm.csv"
        fi

        if [ -f "output/real_data_fraud_analysis.html" ]; then
            success "HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: output/real_data_fraud_analysis.html"
        fi

        if [ -f "output/real_data_fraud_report.txt" ]; then
            success "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: output/real_data_fraud_report.txt"
        fi
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: logs/predictions.log"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    rm -f /tmp/antifraud_*.tmp

    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
show_results() {
    echo ""
    echo -e "${GREEN}=== üéâ –ê–ù–¢–ò–§–†–û–î –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê! ===${NC}"
    echo ""
    echo -e "${CYAN}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã:${NC}"
    echo ""

    if [ -f "models/real_antifraud_model.joblib" ]; then
        echo "‚úÖ –ú–æ–¥–µ–ª—å: models/real_antifraud_model.joblib"
    fi

    if [ -f "output/real_data_predictions_with_llm.csv" ]; then
        echo "‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: output/real_data_predictions_with_llm.csv"
        PRED_COUNT=$(tail -n +2 output/real_data_predictions_with_llm.csv | wc -l)
        echo "   üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: $PRED_COUNT"
    fi

    if [ -f "output/real_data_fraud_analysis.html" ]; then
        echo "‚úÖ HTML –æ—Ç—á–µ—Ç: output/real_data_fraud_analysis.html"
        echo "   üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    fi

    if [ -f "output/real_data_fraud_report.txt" ]; then
        echo "‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: output/real_data_fraud_report.txt"
    fi

    if [ -f "logs/training.log" ]; then
        echo "üìù –õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è: logs/training.log"
    fi

    if [ -f "logs/predictions.log" ]; then
        echo "üìù –õ–æ–≥–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: logs/predictions.log"
    fi

    echo ""
    echo -e "${YELLOW}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    echo "1. –ò–∑—É—á–∏—Ç–µ HTML –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞"
    echo "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
handle_error() {
    error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $1"
    cleanup
    exit 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
trap 'handle_error $LINENO' ERR

# =============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

main() {
    echo ""
    echo -e "${BLUE}üõ°Ô∏è  –ê–ù–¢–ò–§–†–û–î –°–ò–°–¢–ï–ú–ê –î–õ–Ø –ë–ê–ù–ö–ê${NC}"
    echo -e "${BLUE}=================================${NC}"
    echo ""
    echo "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM"
    echo ""

    # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    check_data_structure
    OLLAMA_AVAILABLE=0
    check_ollama && OLLAMA_AVAILABLE=1

    # –≠—Ç–∞–ø 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    prepare_environment
    adapt_scripts

    # –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ
    if ! run_training; then
        cleanup
        exit 1
    fi

    # –≠—Ç–∞–ø 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if [ $OLLAMA_AVAILABLE -eq 1 ]; then
        if ! run_predictions; then
            cleanup
            exit 1
        fi
    else
        warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
        echo "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama"
    fi

    # –≠—Ç–∞–ø 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    cleanup
    show_results

    echo -e "${GREEN}üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --train-only   –¢–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        echo "  --predict-only –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏)"
        echo "  --check        –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö"
        echo ""
        echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:"
        echo "  data_train/    - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"
        echo "  data/          - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
        echo ""
        exit 0
        ;;
    --train-only)
        check_dependencies
        check_data_structure
        prepare_environment
        adapt_scripts
        run_training
        cleanup
        ;;
    --predict-only)
        check_dependencies
        prepare_environment
        run_predictions
        ;;
    --check)
        check_dependencies
        check_data_structure
        check_ollama
        echo ""
        success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
        ;;
    "")
        main
        ;;
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac
